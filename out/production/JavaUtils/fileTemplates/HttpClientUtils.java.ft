#if(${PACKAGE_NAME}!="")
package ${PACKAGE_NAME};
#end



//<dependency>
//<groupId>org.apache.httpcomponents</groupId>
//<artifactId>httpclient</artifactId>
//<version>4.5.13</version>
//</dependency>

public class HttpClientUtils {


    private static RequestConfig requestConfig;

    public static HttpClientUtils InitConfig() {
        //初始化配置
        requestConfig = RequestConfig.custom()
                .setConnectTimeout(10000)
                .setConnectionRequestTimeout(10000)
                .setSocketTimeout(10000)
                .build();

        return new HttpClientUtils();
    }

    public static HttpClientUtils InitProxyConfig(String ip, int port) {
        //初始化配置
        requestConfig = RequestConfig.custom()
                .setConnectTimeout(10000)
                .setConnectionRequestTimeout(10000)
                .setSocketTimeout(10000)
                .setProxy(new HttpHost(ip, port, "http"))
                .build();

        return new HttpClientUtils();
    }




    public CloseableHttpResponse PostMethod(String url, Map<String, Object> map) throws IOException {

//        CloseableHttpClient httpclient = HttpClients.createDefault();

        CloseableHttpClient httpclient = HttpClients.custom()
                .build();




        List<NameValuePair> params = new ArrayList<NameValuePair>();
        Set<Map.Entry<String, Object>> entrySet = map.entrySet();
        for (Map.Entry<String, Object> e : entrySet) {
            NameValuePair pair = new BasicNameValuePair(e.getKey(), (String) e.getValue());
            params.add(pair);
        }

        HttpUriRequest request = RequestBuilder.post()
                .setUri(url)
                .addParameters(params.toArray(new BasicNameValuePair[params.size()]))
                .setConfig(requestConfig)
                .setHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:50.0) Gecko/20100101 Firefox/50.0")
                .setHeader("Content-Type", "application/json;charset=UTF-8")//表示客户端发送给服务器端的数据格式
                .setHeader("Accept", "application/json")
                .build();


        return httpclient.execute(request);



    }


    public CloseableHttpResponse PostMethodWithToken(String url, Map<String, Object> map, String token) throws IOException {

        BasicClientCookie cookie = new BasicClientCookie("JSESSIONID", token);
        BasicCookieStore cookieStore = new BasicCookieStore();
        cookieStore.addCookie(cookie);

        CloseableHttpClient httpclient = HttpClients.custom()
                .setDefaultCookieStore(cookieStore)
                .build();


        List<NameValuePair> params = new ArrayList();
        Set<Map.Entry<String, Object>> entrySet = map.entrySet();
        for (Map.Entry<String, Object> e : entrySet) {
            String name = e.getKey();
            String value = (String) e.getValue();
            NameValuePair pair = new BasicNameValuePair(name, value);
            params.add(pair);
        }

        HttpUriRequest request = RequestBuilder.post()
                .setUri(url)
                .addParameters(params.toArray(new BasicNameValuePair[params.size()]))
                .setConfig(requestConfig)
                .setHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:50.0) Gecko/20100101 Firefox/50.0")
                .setHeader("Content-Type", "application/json;charset=UTF-8")
                .setHeader("Accept", "application/json")
                .build();

        return httpclient.execute(request);


    }


    public   CloseableHttpResponse GetMethod(String url) throws IOException {

        CloseableHttpClient httpClient = HttpClients.createDefault();

        HttpUriRequest request = RequestBuilder.get()
                .setUri(url)
                .setConfig(requestConfig)
                .setHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:50.0) Gecko/20100101 Firefox/50.0")
                .setHeader("Content-Type", "application/json;charset=UTF-8")//表示客户端发送给服务器端的数据格式
                .setHeader("Accept", "application/json")
                .build();

        return httpClient.execute(request);


    }


    public   CloseableHttpResponse GetMethodWithToken(String url,String token) throws IOException {


        BasicClientCookie cookie = new BasicClientCookie("JSESSIONID", token);
        BasicCookieStore cookieStore = new BasicCookieStore();
        cookieStore.addCookie(cookie);

        CloseableHttpClient httpclient = HttpClients.custom()
                .setDefaultCookieStore(cookieStore)
                .build();

        HttpUriRequest request = RequestBuilder.get()
                .setUri(url)
                .setConfig(requestConfig)
                .setHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:50.0) Gecko/20100101 Firefox/50.0")
                .setHeader("Content-Type", "application/json;charset=UTF-8")//表示客户端发送给服务器端的数据格式
                .setHeader("Accept", "application/json")
                .build();

        return httpclient.execute(request);


    }



}